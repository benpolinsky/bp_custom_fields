c
params.find {|*a| deep_find('groups_attributes', a.last)}
params.find {|*a| deep_find('groups_attributes')}
params.find {|*a| deep_find('groups_attributes', nil)}
params.find {|*a| puts a}
params.is_a? Enumerable
params.key?('groups_attributes')
params.respond_to?(:key?)
params
deep_find(params)
children_attributes
nodes
c
params.values.map{|v| v["fields_attributes"].values}.flatten.first
params.values.map{|v| v["fields_attributes"].values}.flatten
params.values.map{|v| v["fields_attributes"].values}
inner_params
inner_params.first["children_attributes"]
inner_params["children_attributes"]
inner_params
c
nodes
next
c
params.values.map{|v| v["fields_attributes"]}
params.values.map{|v| v["fields_attributes"].values}
params.values.map{|v| v["fields_attributes"]}
params.values
params.values.first
params.values
c
next
params
params.values.size
nodes
next
c
params.values.size
params.values
nodes
next
c
params
c
params
c
nodes
c
w
parent.field_type
parent
self
next
self
next
field_type
self
next
self
next
self
next
self
c
self.field_type
self
next
self.field_type
self
c
self
c
self
c
self.children
self
next
repeater
self
c
q
parent_object
parent_object.children
parent_object.field_type
parent_object
c
parent_object.field_type
parent_object
self
c
parent_object.children
BpCustomFields::FieldManager.initialize_field(parent_object)
parent_object.children
c
c4
parent_object
BpCustomFields::FieldManager.initialize_field(parent_object)
parent_object
c
parent_object
parent_obect
c
self.parent.children.map(&:name)
self
self.parent.children
.parent
self
parent_object.children
self.parent_id = parent_object.id
self
self.parent = parent_object
self.parent.parent
self.parent
self
self.parent
self
parent_object
c
self.parent.field_type
self.parent
self
self.
c
self
c
flex.children
flex.fields
flex = g.fields.first
g = @post.groups.first
continue
flex.children
flex.fields
flex.field_type
flex = g.fields.first
g.fields
g = @post.groups.first
@post.groups.first
@post.groups
c
next
number_of_parents(self)
q
selfq
self.parent.field_template
c
self
self.parent.field_template
c
self.parent.field_template
c
self
self.parent.field_template
self.parent
self
number_of_parents(self)
c
number_of_parents(self)
self.parent.field_template
self.parent
self.field_template
self
c
parent.field_template.children
parent.field_template
parent.field_template.children.first.id
c
next
parent.field_template.children.first.id
parent.field_template.children.first
parent.field_template.children
parent.field_template
parent
self
c
field_nodes = {field_nodes: field_nodes}
field_nodes = field_nodes: field_nodes
field_nodes
c
field_nodes
fields_base
fields_base.last[:repeater_groups_attributes] += [fields_attributes: field_nodes]
fields_base.last[:repeater_groups_attributes]
fields_base.last[:repeater_groups_attributes
fields_base.last[:repeater_groups_attributes] += [1]
fields_base
fields_base.last[:repeater_groups_attributes] + [1]
fields_base.last[:repeater_groups_attributes] + 1
fields_base.last[:repeater_groups_attributes]
fields_base.last
fields_base
fields_base[:repeater_groups_attributes]
c
fields_base.last
fields_base
q
fields_base
fields_base[:repeater_groups_attributes] + [fields_attributes: field_nodes]
q
fields_base
fields_base[:repeater_groups_attributes] + [fields_attributes: field_nodes]
field_nodes
q
node_attributes_base[:repeater_groups_attributes] + [fields_attributes: nodes]
val
exit
fields_base[0].values
fields_base[0] << :a
fields_base[0] += :a
fields_base[0]
fields_base
c
fields_base
field_nodes
c
field_nodes
c
field_nodes.last[:repeater_groups_attributes]
field_nodes.last[:repeater_group_attributes]
field_nodes.last
field_nodes.lsat
field_nodes
field_nodes.last[:repeater_groups_attributes]
field_nodes.last[:repeater_groups_attributes].flatten!
field_nodes.last[:repeater_groups_attributes].flatten
field_nodes.last
field_nodes.last[:repeater_groups_attributes] << repeater_groups_base
field_nodes = fields_base + [repeater_groups_attributes: field_nodes]
c
temp_nodes
new_nodes
new_ndoes
new_nodes = temp_nodes.last[:repeater_groups_attributes] << repe
temp_nodes
new_nodes
new_nodes = temp_nodes.last[:repeater_groups_attributes] + repeater_groups_base
temp_nodes.last
temp_nodes.lats
temp_nodes.last[:repeater_groups_attributes] + repeater_groups_base
temp_nodes.last[:repeater_groups_attributes]
temp_nodes.last[:repeater_group_attributes]
temp_nodes.last
temp_nodes = fields_base + [repeater_groups_attributes: field_nodes]
c
temp_nodes
temp_nodes.last[:repeater_groups_attributes]
temp_nodes
temp_nodes.last[:repeater_groups_attributes] + repeater_groups_base
temp_nodes
temp_nodes.last[:repeater_groups_attributes] << repeater_groups_base
temp_nodes.last[:repeater_groups_attributes]
temp_nodes.last
temp_nodes
temp_nodes[:repeater_groups]
temp_nodes.last[:repeater_groups]
temp_nodes = fields_base + [repeater_groups_attributes: field_nodes]
fields_base + [repeater_groups_attributes: field_nodes]
