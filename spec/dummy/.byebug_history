c
parent.field_template.children
parent.field_template
parent.field_template.children.first.id
c
next
parent.field_template.children.first.id
parent.field_template.children.first
parent.field_template.children
parent.field_template
parent
self
c
field_nodes = {field_nodes: field_nodes}
field_nodes = field_nodes: field_nodes
field_nodes
c
field_nodes
fields_base
fields_base.last[:repeater_groups_attributes] += [fields_attributes: field_nodes]
fields_base.last[:repeater_groups_attributes]
fields_base.last[:repeater_groups_attributes
fields_base.last[:repeater_groups_attributes] += [1]
fields_base
fields_base.last[:repeater_groups_attributes] + [1]
fields_base.last[:repeater_groups_attributes] + 1
fields_base.last[:repeater_groups_attributes]
fields_base.last
fields_base
fields_base[:repeater_groups_attributes]
c
fields_base.last
fields_base
q
fields_base
fields_base[:repeater_groups_attributes] + [fields_attributes: field_nodes]
q
fields_base
fields_base[:repeater_groups_attributes] + [fields_attributes: field_nodes]
field_nodes
q
node_attributes_base[:repeater_groups_attributes] + [fields_attributes: nodes]
val
exit
fields_base[0].values
fields_base[0] << :a
fields_base[0] += :a
fields_base[0]
fields_base
c
fields_base
field_nodes
c
field_nodes
c
field_nodes.last[:repeater_groups_attributes]
field_nodes.last[:repeater_group_attributes]
field_nodes.last
field_nodes.lsat
field_nodes
field_nodes.last[:repeater_groups_attributes]
field_nodes.last[:repeater_groups_attributes].flatten!
field_nodes.last[:repeater_groups_attributes].flatten
field_nodes.last
field_nodes.last[:repeater_groups_attributes] << repeater_groups_base
field_nodes = fields_base + [repeater_groups_attributes: field_nodes]
c
temp_nodes
new_nodes
new_ndoes
new_nodes = temp_nodes.last[:repeater_groups_attributes] << repe
temp_nodes
new_nodes
new_nodes = temp_nodes.last[:repeater_groups_attributes] + repeater_groups_base
temp_nodes.last
temp_nodes.lats
temp_nodes.last[:repeater_groups_attributes] + repeater_groups_base
temp_nodes.last[:repeater_groups_attributes]
temp_nodes.last[:repeater_group_attributes]
temp_nodes.last
temp_nodes = fields_base + [repeater_groups_attributes: field_nodes]
c
temp_nodes
temp_nodes.last[:repeater_groups_attributes]
temp_nodes
temp_nodes.last[:repeater_groups_attributes] + repeater_groups_base
temp_nodes
temp_nodes.last[:repeater_groups_attributes] << repeater_groups_base
temp_nodes.last[:repeater_groups_attributes]
temp_nodes.last
temp_nodes
temp_nodes[:repeater_groups]
temp_nodes.last[:repeater_groups]
temp_nodes = fields_base + [repeater_groups_attributes: field_nodes]
fields_base + [repeater_groups_attributes: field_nodes]
c
field_nodes
c
field_nodes
fields_base
fields_base.last
fields_base
fields_base.last[:repeater_groups_attributes] + [fields_attributes: field_nodes]
c
{groups_attributes: [:group_template_id, :id, field_nodes]}
c
field_nodes
c
field_nodes
c
val
fields_base.last[:repeater_groups_attributes]
fields_base.last.last
fields_base.last
fields_base
field_nodes
c
ields_base.last[:fields_attributes]
[repeater_groups_attributes: field_nodes]
field_nodes
val
c
cc
c
4
c
val
fields_base.last[:repeater_groups_attributes]
c
field_nodes
field_node
c
field_nodes
c
field_nodes
c
field_nodes
c
node_params[:repeater_groups_attributes].first[1]
node_params[:repeater_groups_attributes][1]
node_params[:repeater_groups_attributes].first
node_params[:repeater_groups_attributes].size
node_params[:repeater_groups_attributes]
node_params[:repeater_group_attributes]
node_params
c
field_nodes
c
third_level_paramsc
third_level_params
c
field_nodes
c
field_nodes
c
field_nodes
c
fields_base.last[:repeater_groups_attributes]
fields_base.last[:]
fields_base[:repeater_groups_attributes]
fields_base
field_nodes
third_level_params
val
c
field_nodes
c
next
third_level_params
third_level_param
c
params.values
params
c
inner_params
inner_params.first
.first
inner_params
third_level_params
c
inner_params
exit
params.values
inner_params
c
repeater_group_nodes
continue
params.values.first["fields_attributes"].values.first['repeater_groups_attributes'].each {|ip| p ip}
params.values.first["fields_attributes"].values.first['repeater_groups_attributes'].each {|ip| ip}
params.values.first["fields_attributes"].values.first['repeater_groups_attributes'].each do |ip|
params.values.first["fields_attributes"].values.first['repeater_groups_attributes'].size
params.values.first["fields_attributes"].values.first['repeater_groups_attributes']
params.values.first["fields_attributes"].values.first
params.values.first["fields_attributes"].first
params.values.first["fields_attributes"]
params.values["fields_attributes"]
params.values.size
params.values
params.firest
params.size
params.values.size
params.values.soze
params.values
params
repeater_group_nodes
c
params
continue
params
c
params
repeater_groups_attributes_base
repeater_group_attributes_base
repeater_group_nodes
c
exit
self.parent.parent
self.parent
self
ob.parent
number_of_parents(self)
