continue
@post.groups.first.fields.size
@post.groups.size
exit
@post.errors
continue
group_f.object
group_f
continue
@post.groups.first.fields
@post.groups
@post.errors
@post
continue
target_model.first.groups
target_model.all
target_model = appearances.first.resource.constantize
continue
target_model.all
target_model.f
target_model.first.groups
target_model = appearances.first.resource.constantize 
continue
target_model.first.groups
target_model.groups
self.groups
target_model.all
target_model = appearances.first.resource.constantize 
target_model.all
continue
post = ActiveRecord::Base.descendants.reject {|d| d.name == "ActiveRecord::SchemaMigration"}.map(&:name)
post = ActiveRecord::Base.descendants.reject {|d| d.name == "ActiveRecord::SchemaMigration"}
post = ActiveRecord::Base.descendants.reject_if {|d| d.name == "ActiveRecord::SchemaMigration"}
post = ActiveRecord::Base.descendants.map(&:name)
post = ActiveRecord::Base.descendants.map(&:nme)
post.name
post.class
post = ActiveRecord::Base.descendants.last
ActiveRecord::Base.descendants.last
q
pp a
a = location.group_by(&:class).map{ |loc| loc[1].reduce(:&) }
pp a
a
a = location.group_by(&:class).each{ |loc| loc[1].reduce(:&) }
continue
location.group_by(&:class).each {|s| s[1].reduce(:&) }
location.group_by(&:class).values
location.group_by(&:class).values.reduce(:&)
location.group_by(&:class).keys.reduce(:&)
location.group_by(&:class).each {|s| pp s[1].reduce(:&) }
location.group_by(&:class).each {|s| pp s[1].reduce(:|) }
location.group_by(&:class).each {|s| pp s[1] }
location.group_by(&:class).each {|s| pp s[0] }
location.group_by(&:class).each {|s| pp s }
location.group_by(&:class).each {|s| s}
location.group_by(&:class).each do |s|
location.group_by(&:class).keys
location
location.group_by(&:class)
location.group_by(&:ckass)
continue
pp location
continue
location
pp location
location
continue
pp BpCustomFields::Appearance.all.appears_on
pp four_posts
continue
location
locatio
continue
location.size
location
q
continue
location
exit
location
continue
location.map(&:class).uniq.size
location.flat_map(&:class).uniq.size
location.flat_map(&:class).uniq
location.flat_map(&:class)
location.flatten
location
location.each {|do| load}
location.each do |asd|
location.each do |lo|
location.first
location.class
location.reduce(:|).class
location.reduce(:|)
location.first | location.last
location
location.last.merge(location.first)
location.first.merge(location.last)
location.first.erge(location.last)
location.first | location.last
location.first & location.last
location.first.first
location.first
location
location.reduce(:&)
location.uniq.size
localtion.uniq.size
location.class
location
continue
location.size
location
next
resource_model.all
step
resource_id
resource_model
step
resource.constantize
resource
resource_model
resource_mode
continue
qu
sum
q
sum
continue
query
sum
continue
query
l
continue
l
p query
continue
query
l
continue
query
l
;
continue
next
location
l[1]
next
location.size
location.uniq.size
location.size
continue
location.last
location.first
location
continue
location.first
location.last
location.size
location
exit
location.size
continue
location.size
Location.size
location.last
location.first
location
location.pretty_print
p location.inspect
pp location
location
