continue
children.any?(&:persisted?)
children.persisted?
children.persisted
children
c
has_children?
children
continue
children
children.any?
continue
next
children.any?
children
exit
c
continue
value
continue
self.field_type
self
self.chooseable?
value
c
value
c
continuie
c
exit
continue
value
continue
value
continue
next
self
exit
all.map{|c|c.split(':')}.flatten
all.map{|c|c.split(',')}.flatten
all.each{|c|c.split(',')}.flatten
all.each{|c|c.gsub(':', ',')}
exit
Hash[a]
Hash a
a =  all.map{|c|c.split(':')}.flatten.map(&:to_sym)
a =  all.map{|c|c.split(':').to_sym}.flatten
Hash[a]
Hash a
Hasha
a =  all.map{|c|c.split(':')}.flatten
Hash[1,2,3,4]
all
 all.map{|c|c.split(':')}.flatten
 Hash[all.map{|c|c.split(':')}.flatten!]
 Hash[all.map{|c|c.split(':')}.flatten]
 Hash all.map{|c|c.split(':')}.flatten
all
Hash[all]
 Hash.new all.map{|c|c.split(':')}.flatten
 all.map{|c|c.split(':')}.flatten
 all.map{|c|c.split(':')}
 all.map{|c|c.split(',')}
all.flatten
 all.map{|c|c.gsub(':', ',')}
 all.each{|c|c.gsub(':', ',')}
continue
Field.new.file
file
continue
@image_field.field_type
@image.field_type
@image_field.file
@image_field
continue
@name_field
continue
@group_template_three.groups.first
@group_template_three.groups.first.save
@group_template_three.groups.first.saved?
@group_template_three.groups.first
@group_template_three.groups
@person.groups
@person.save
@person.groups
@person.valid?
exit
@group_three
@group_three.valid?
@group_template_three.valid?
@group_three
quit
continue
group_template
group
next
group
next
ft
group_template
continue
group_template
continue
group_template
continue
group_template
continue
group_template
continue
@person.groups
@person
continue
BpCustomFields::Field.all
continue
reject!
temps
next
temps
temp.field_templates
temp
temp.appearances.any?(&:excluded)
temp.appearances
continue
temp.appearances
temp.appearances.any?(&:excluded)
continue
temps.each {|t| t.appearances}
temps
continue
found_templates
continue
resource
continue
resource
continue
resource
continue
a.all
a.first
a.all
a
a.sizea.all.
a.size
a
a = BpCustomFields::GroupTemplate.where("bp_custom_fields_appearances.resource = ? AND (bp_custom_fields_appearances.resource_id IS NULL OR (bp_custom_fields_appearances.resource_id = ? AND bp_custom_fields_appearances.appears = ?))", resource.class, resource.id, true).references(:bp_custom_fields_appearances)
        where("bp_custom_fields_appearances.resource = ? AND (bp_custom_fields_appearances.resource_id IS NULL OR (bp_custom_fields_appearances.resource_id = ? AND bp_custom_fields_appearances.appears = ?))", resource.class, resource.id, true).references(:bp_custom_fields_appearances)
a = BpCustomFields::GroupTemplate.includes(:appearances).
resource
continue
resource
continue
resource.group_template
resource.new_record?
resource
group_templates.first.appears_on
group_templates.first
group_templates
continue
appearances_for_resource_class.flatten.class
appearances_for_resource_class.flatten
appearances_for_resource_class.class
appearances_for_resource_class
continue
groups.each { |group| p group.fields.size == params["field_templates_attributes"].size}
groups.each { |group| group.fields.size == params["field_templates_attributes"].size}
params["field_templates_attributes"].size
self.groups
self.group_templates
self
params[:groups]
params
continue
@object.groups.last.fields.last.field_template
@object.groups.last.fields
@object.groups.last.update_fields!
@object.groups.last.fields
@object.groups.last.size
@object.groups.size
@object.groups
@object
next
groups.first.fields
groups.fields
groups.first.group_template.field_templates
groups.first.group_template.fields
groups.first.group_template
groups.first.group_templates
groups.first.field_templates
groups.field_templates
groups.fields
groups
new_group_template_ids
next
continue
groups.last.fields
groups
new_group_template_ids.each {|group_template_id| groups.create(group_template_id: group_template_id)}
new_group_template_ids = actual_group_template_ids - attached_group_template_ids
continue
groups.size
rgro
groups
groups.size
groups.where(group_template_id: stale_group_template_ids).destroy_all
groups.size
groups
post.groups
continue
groups.where(group_template_id: stale_group_template_ids)
groups.flat_map(&:group_template_id) - active_group_template_ids
continue
Grcocontinue
stale_group_template_ids
continue
Appearance.where(resource: "Post").map(&:group_template)
Appearance.where(resource: "Post")
Appearance.where(resource: "Post"
Appearance.where(resource: "Post", group_template: id)
Appearance.where(resource: "Post", group_template: self.id)
Appearance.where(resource: "Post")
Appearance
appearances
continue
joins(:appearances).where("appearances.resource = ?", 'asdsad')
joins(:appearances).where("appearances.resource = ?", 'asdsad').size
joins(:appearances).where("appearances.resource = ?", 'asdsad').inspect
joins(:appearances).where("appearances.resource = ?", 'asdsad')
joins(:appearances).where("appearances.resource = ?", 'asdsad)
joins(:appearances).where("appearances.resource = ?", sad)
joins(:appearances).where("appearances.resource = ?", 1)
joins(:appearances).where("appearances.id = ?", 1)
joins(:appearances).first.appearances
joins(:appearances).appearances
joins(:appearances)
Appearance
continue
group_template.field_templates.map(&:id)
[1] & [1,2]
[1] | [1,2]
group_template.field_templates.map(&:id)
current_field_template_ids
cuurent_field_template_ids
continue
@post.groups.first.fields.size
@post.groups.size
exit
@post.errors
continue
group_f.object
group_f
continue
@post.groups.first.fields
@post.groups
@post.errors
@post
continue
